"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ParamTypes;
(function (ParamTypes) {
    ParamTypes["number"] = "number";
    ParamTypes["string"] = "string";
    ParamTypes["boolean"] = "boolean";
    ParamTypes["email"] = "email";
})(ParamTypes = exports.ParamTypes || (exports.ParamTypes = {}));
var ParamError = /** @class */ (function () {
    function ParamError(param, message) {
        this.param = param;
        this.message = message;
    }
    return ParamError;
}());
exports.ParamError = ParamError;
var _typeHandler = function (param, paramConfig, errors) {
    if (param && paramConfig.type == ParamTypes.email) {
        var _emailRegex = new RegExp(/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
        var isValidEmail = _emailRegex.test(param);
        if (!isValidEmail) {
            errors.push(new ParamError(paramConfig.name, paramConfig.name + " should be valid email."));
        }
    }
    if (param && paramConfig.type == ParamTypes.string) {
        if (typeof param != ParamTypes.string.toString()) {
            errors.push(new ParamError(paramConfig.name, paramConfig.name + " should be string."));
        }
    }
    if (param && paramConfig.type == ParamTypes.number) {
        if (typeof param != ParamTypes.number.toString()) {
            errors.push(new ParamError(paramConfig.name, paramConfig.name + " should be number."));
        }
    }
    if (param && paramConfig.type == ParamTypes.boolean) {
        if (typeof param != ParamTypes.boolean.toString()) {
            errors.push(new ParamError(paramConfig.name, paramConfig.name + " should be boolean."));
        }
    }
};
var _requiredHandler = function (param, paramConfig, errors) {
    if ([undefined, null, ''].indexOf(param) > -1) {
        errors.push(new ParamError(paramConfig.name, paramConfig.name + " is required."));
    }
};
var _minimumHandler = function (param, paramConfig, errors) {
    if (param && paramConfig.min && paramConfig.type == ParamTypes.number) {
        if (param < paramConfig.min) {
            errors.push(new ParamError(paramConfig.name, paramConfig.name + " should be " + paramConfig.min + " minimum."));
        }
    }
    if (paramConfig.min && paramConfig.type == ParamTypes.string) {
        if (param && param.length < paramConfig.min) {
            errors.push(new ParamError(paramConfig.name, paramConfig.name + " length should be " + paramConfig.min + " minimum."));
        }
    }
};
var _maximumHandler = function (param, paramConfig, errors) {
    if (paramConfig.max && paramConfig.type == ParamTypes.number) {
        if (param && param > paramConfig.max) {
            errors.push(new ParamError(paramConfig.name, paramConfig.name + " should not be more than " + paramConfig.max + "."));
        }
    }
    if (paramConfig.max && paramConfig.type == ParamTypes.string) {
        if (param && param.length > paramConfig.max) {
            errors.push(new ParamError(paramConfig.name, paramConfig.name + " length should not be longer than " + paramConfig.max + "."));
        }
    }
};
var _patternHandler = function (param, paramConfig, errors) {
    if (paramConfig.pattern && !paramConfig.pattern.test(param)) {
        errors.push(new ParamError(paramConfig.name, paramConfig.name + " does not match pattern."));
    }
};
function Params(handleInside, params) {
    return function (target, propertyKey, descriptor) {
        var originalMethod = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var req = args[0], res = args[1];
            var errors = [];
            for (var i = 0; i < params.length; i++) {
                var paramConfig = params[i];
                var fromBody = req.body[paramConfig.name];
                if (paramConfig.required) {
                    _requiredHandler(fromBody, paramConfig, errors);
                    _typeHandler(fromBody, paramConfig, errors);
                }
                else {
                    _typeHandler(fromBody, paramConfig, errors);
                }
                if (paramConfig.min) {
                    _minimumHandler(fromBody, paramConfig, errors);
                }
                if (paramConfig.max) {
                    _maximumHandler(fromBody, paramConfig, errors);
                }
                if (paramConfig.pattern) {
                    _patternHandler(fromBody, paramConfig, errors);
                }
            }
            if (errors.length > 0 && handleInside) {
                res.status(400).send({
                    errors: errors
                });
                return false;
            }
            req.validBody = errors.length === 0 ? true : false;
            req.bodyErrors = errors;
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
}
exports.Params = Params;
